#!/usr/bin/env ruby

require 'bundler/setup'
require 'distribot'
require 'byebug'
require 'pp'
require 'active_support/core_ext/object'
require 'active_support/core_ext/array'
require 'active_support/json'


Distribot.configure do |config|
  config.redis_url = 'redis://172.17.0.2:6379/0'
  config.rabbitmq_url = 'amqp://distribot:distribot@172.17.0.2:5672'
end

module Example
  def self.make_workflow(name)
    name += "#1"
    @workflow = Distribot::Workflow.new(
      name: name,
      phases: [
        {
          name: 'start',
          is_initial: true,
          transitions_to: 'part1'
        },
        {
          name: 'part1',
          handlers: %w(
            HardWorker
            GoodWorker
            FastWorker
            CheapWorker
            ForeignWorker
            SlowWorker
          ),
          transitions_to: 'part2'
        },
        {
          name: 'part2',
          handlers: %w(
            HardWorker
            GoodWorker
            FastWorker
            CheapWorker
            ForeignWorker
            SlowWorker
          ),
          transitions_to: 'part3'
        },
        {
          name: 'part3',
          handlers: %w(
            HardWorker
            GoodWorker
            FastWorker
            CheapWorker
            ForeignWorker
            SlowWorker
          ),
          transitions_to: 'part4'
        },
        {
          name: 'part4',
          handlers: %w(
            HardWorker
            GoodWorker
            FastWorker
            CheapWorker
            ForeignWorker
            SlowWorker
          ),
          transitions_to: 'finish'
        },
        {
          name: 'finish',
          is_final: true
        }
      ]
    )
    Distribot.redis.incr('distribot.running.workflows')
    @workflow.save! do |workflow|
      Distribot.redis.decr('distribot.running.workflows')
      new_index = Distribot.redis.incr('finished')
puts "/////////////////////////////// ------------------------ ///////////////////"
      max = Distribot.redis.get('distribot.max.workflows').to_i
      current = Distribot.redis.get('distribot.running.workflows').to_i
      diff = max - current
      max_accelleration = 9999
      increase = diff > max_accelleration ? max_accelleration : diff
      increase.times do |num|
        puts "+++++++++ SPAWN #{num + 1}/#{increase} +++++++++++"
        Example.make_workflow("Workflow: #{new_index} -> ")
      end
    end
    @workflow
  end
end

phase_started = Distribot::PhaseStartedHandler.new
phase_finished = Distribot::PhaseFinishedHandler.new
task_finished = Distribot::TaskFinishedHandler.new
handler_finished = Distribot::HandlerFinishedHandler.new
workflow_finished = Distribot::WorkflowFinishedHandler.new

Distribot::WorkflowCreatedHandler.new

Distribot.redis.set("finished", 0)

max = ARGV.shift.to_i
puts "<ENTER> when ready:"
gets

Distribot.redis.set('distribot.running.workflows', 0)
Distribot.redis.set('distribot.max.workflows', max)
Example.make_workflow "Workflow[1]"

while true
  sleep 5
  max = Distribot.redis.get('distribot.max.workflows').to_i
  current = Distribot.redis.get('distribot.running.workflows').to_i
  puts "\tRUNNING: at #{Time.now} -- #{current} / #{max}"
  diff = max - current
  diff.times do |num|
    new_index = Distribot.redis.incr('finished')
    puts "+++++++++ SPAWN #{num + 1}/#{diff} +++++++++++"
    Example.make_workflow("Workflow: #{new_index} -> ")
  end
end


