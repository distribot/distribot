#!/usr/bin/env ruby

require 'bundler/setup'
require 'distribot'
require 'byebug'
require 'pp'
require 'active_support/core_ext/object'
require 'active_support/core_ext/array'
require 'active_support/json'
require 'dotenv'

Dotenv.load

Distribot.configure do |config|
  config.redis_url = ENV['DISTRIBOT_REDIS_URL']
  config.rabbitmq_url = ENV['DISTRIBOT_RABBITMQ_URL']
end

class SimpleWorker
  include Distribot::Worker
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process

  def enumerate(_context, &callback)
    jobs = [ ]
    2.times do |chunk|
      max = 5
      jobs << (1..max).to_a.map{|n| {id: SecureRandom.uuid, args: [chunk, n] } }
    end
    callback.call(jobs.flatten)
  end

  def process(_context, job)
    logger.info job.to_s
    raise "Test Error!" if rand >= 0.9
    job_time = Distribot.redis.get('difficulty').to_f
    sleep job_time <= 0 ? 3 : job_time
  end
end

class HardWorker < SimpleWorker;
  version '1.1.0'
  enumerate_with :enumerate
  process_tasks_with :process
end
class GoodWorker < SimpleWorker;
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process
end
class FastWorker < SimpleWorker;
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process
end
class CheapWorker < SimpleWorker;
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process
end
class ForeignWorker < SimpleWorker;
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process
end
class SlowWorker < SimpleWorker;
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process
end

class HackerNewsLister
  include Distribot::Worker
  version '1.0.1'
  enumerate_with :enumerate
  process_tasks_with :process
  def enumerate(context, &callback)
    story_ids = JSON.parse(`curl --silent https://hacker-news.firebaseio.com/v0/newstories.json`).sample(10)
    callback.call( story_ids.map { |id| {story_id: id} } )
  end
  def process(context, task)
    json = `curl --silent -m 5 https://hacker-news.firebaseio.com/v0/item/#{task[:story_id]}.json`
    data_key = "workflow.#{context.workflow_id}.stories"
    parsed = JSON.parse(json, symbolize_names: true) rescue { }
pp url: parsed[:url]
    if parsed.key? :url
      Distribot.redis.multi do |redis|
        place = [data_key, SecureRandom.uuid].join(':')
        redis.set place, json
        redis.sadd data_key, place
pp place => json
      end
    end
  end
end

class ArticleDownloaderWorker
  include Distribot::Worker
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process

  def enumerate(context, &callback)
    data_key = "workflow.#{context.workflow_id}.stories"
    callback.call( Distribot.redis.smembers(data_key).map { |location| {data_locator: location} } )
    Distribot.redis.del data_key
  end

  def process(context, task)
    pp self => task
    data = JSON.parse(Distribot.redis.get( task[:data_locator] ), symbolize_names: true)
pp data
    article = `curl --silent "#{data[:url]}"`.chomp
  end
end

puts HackerNewsLister.new.run
puts ArticleDownloaderWorker.new.run

Distribot.logger.info HardWorker.new.run
Distribot.logger.info GoodWorker.new.run
Distribot.logger.info FastWorker.new.run
Distribot.logger.info CheapWorker.new.run
Distribot.logger.info ForeignWorker.new.run
Distribot.logger.info SlowWorker.new.run

puts "Worker up and running!"

sleep
