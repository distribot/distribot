#!/usr/bin/env ruby

require 'bundler/setup'
require 'distribot'
require 'byebug'
require 'pp'
require 'active_support/core_ext/object'
require 'active_support/core_ext/array'
require 'active_support/json'
require 'dotenv'

Dotenv.load

Distribot.configure do |config|
  config.redis_url = ENV['DISTRIBOT_REDIS_URL']
  config.rabbitmq_url = ENV['DISTRIBOT_RABBITMQ_URL']
end

class SimpleWorker
  include Distribot::Worker
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process

  def enumerate(_context, &callback)
    jobs = [ ]
    2.times do |chunk|
      max = 5
      jobs << (1..max).to_a.map{|n| {id: SecureRandom.uuid, args: [chunk, n] } }
    end
    callback.call(jobs.flatten)
  end

  def process(_context, job)
    logger.info job.to_s
    raise "Test Error!" if rand >= 0.9
    job_time = Distribot.redis.get('difficulty').to_f
    sleep job_time <= 0 ? 3 : job_time
  end
end

class HardWorker < SimpleWorker;
  version '1.1.0'
  enumerate_with :enumerate
  process_tasks_with :process
end
class GoodWorker < SimpleWorker;
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process
end
class FastWorker < SimpleWorker;
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process
end
class CheapWorker < SimpleWorker;
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process
end
class ForeignWorker < SimpleWorker;
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process
end
class SlowWorker < SimpleWorker;
  version '1.0.0'
  enumerate_with :enumerate
  process_tasks_with :process
end

Distribot.logger.info HardWorker.new.run
Distribot.logger.info GoodWorker.new.run
Distribot.logger.info FastWorker.new.run
Distribot.logger.info CheapWorker.new.run
Distribot.logger.info ForeignWorker.new.run
Distribot.logger.info SlowWorker.new.run

puts "Worker up and running!"

sleep
